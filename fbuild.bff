#include "buildsystem/buildsystem.bff"
#include "buildsystem/clang-config.bff"

Using(.BuildContext)

.FBuildProjectName = "aoc"
.ArchitectureNames = { '$X64String$' }
.CompilerBaseConfig = .Clang_BaseConfig
.CompilerConfigs = .Clang_Native_Configs

{
	Using(.CompilerBaseConfig)

	.2020_Day1_ObjectList =
	[
		Using(.ObjectListCommon)

		.ProjectBasePath = '$BuildRootPath$/src/2020/day1'
		.SolutionFolderName = '2020'

		.Name = '2020_day1'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
		.CompilerInputPath = '$ProjectBasePath$'
	]

	.2020_Day1_Executable =
	[
		Using(.ExecutableCommon)

		.SolutionFolderName = '2020'
		.LocalDebuggerWorkingDirectory = '$BuildRootPath$/src/2020/day1'

		.Name = '2020_day1'
		.DependencyObjectLists =
		{
			.2020_Day1_ObjectList,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	]

	.BuildTargets + .2020_Day1_Executable

	.2020_Day2_ObjectList =
	[
		Using(.ObjectListCommon)

		.ProjectBasePath = '$BuildRootPath$/src/2020/day2'
		.SolutionFolderName = '2020'

		.Name = '2020_day2'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
		.CompilerInputPath = '$ProjectBasePath$'
	]

	.2020_Day2_Executable =
	[
		Using(.ExecutableCommon)

		.SolutionFolderName = '2020'
		.LocalDebuggerWorkingDirectory = '$BuildRootPath$/src/2020/day2'

		.Name = '2020_day2'
		.DependencyObjectLists =
		{
			.2020_Day2_ObjectList,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	]

	.BuildTargets + .2020_Day2_Executable

	// set up build targets
	
	ForEach(.CompilerConfig in .CompilerConfigs)
	{
		.CompilerConfigContext =
		[
			.UnityNames = {}
			.Targets = {}
			.BuildTargetNames = {}
		]

		Using(.CompilerConfigContext)
		Using(.CompilerConfig)

		ForEach(.BuildTarget in .BuildTargets)
		{
			AddBuildTarget(.BuildTarget)
		}

		.Targets + .UnityNames
		.Targets + .BuildTargetNames

		Alias('$ConfigName$') {}

		RemoveDir('clean-$ConfigName$')
		{
			.RemovePaths =
			{
				'$IntermediateFilePath$/$ConfigName$',
				'$BuildOutputPath$/$ConfigName$',
			}
		}

		^UnityNames + .UnityNames
		^BuildTargetNames + .BuildTargetNames
	}

	// set up visual studio projects & solution

	{
		.VSContext =
		[
			.Targets = {}
			.ProjectConfigs = {}
			.ProjectConfigNames = {}
			.ProjectNames = {}
			.SolutionNames = {}
			//.SolutionDependencies = {}
			.SolutionFolders = {}
			.SolutionFolderNames = {}
		]

		Using(.VSContext)

		ForEach(.CompilerConfig in .CompilerConfigs)
		{
			Using(.CompilerConfig)

			ForEach(.ArchitectureName in .ArchitectureNames)
			{
				.ProjectConfig = 
				[
					.Platform = .ArchitectureName
					.Config = .ConfigName
					.ProjectConfigName = '$Config$_$Platform$'
				]

				AddProjectConfig(.ProjectConfig)
			}
		}

		ForEach(.BuildTarget in .BuildTargets)
		{
			Using(.BuildTarget)

			AddProject(.BuildTarget)
		}

		.AllProject =
		[
			Using(.ProjectCommon)
			
			.Name = 'all'
			.ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -config $BuildRootPath$/fbuild.bff ^$(Configuration)'
			.ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -clean -config $BuildRootPath$/fbuild.bff ^$(Configuration)'
			.ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -config $BuildRootPath$/fbuild.bff clean-^$(Configuration)'
		]

		AddProject(.AllProject)

		.Solution =
		[
			Using(.SolutionCommon)
			
			.Name = '$FBuildProjectName$'
			.SolutionProjects = .ProjectNames
        	.SolutionConfigs = .ProjectConfigs
			.SolutionBuildProject = 'all-vcxproj'
		]

		AddSolution(.Solution)

		.Targets + .ProjectNames
		.Targets + .SolutionNames
		
		Alias('sln') {}

		RemoveDir('clean-sln')
		{
			.RemovePaths =
			{
				'$VisualStudioSolutionPath$',
			}
		}
	}

	.Targets + .UnityNames
	.Targets + .BuildTargetNames

	Alias('all') {}

	RemoveDir('clean')
	{
		.RemovePaths =
		{
			'$IntermediateFilePath$',
			'$BuildOutputPath$',
		}
	}
}
