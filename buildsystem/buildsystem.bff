#once

#include "platform-config.bff"
#include "clang-config.bff"
#include "powershell-config.bff"
#include "python-config.bff"
#include "vulkan-config.bff"

.BuildRootPath = '$_WORKING_DIR_$' // should be '$_CURRENT_BFF_DIR_$' but that seems broken...
.IntermediateFilePath = '$BuildRootPath$/build.intermediate'
.VisualStudioSolutionPath = '$BuildRootPath$/build.vssolution'
.BuildOutputPath = '$BuildRootPath$/build.output'

.ProjectCommon = 
[
    .EmptyString = ''
    
    .ProjectType = 'vcxproj'
	.ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -config $BuildRootPath$/fbuild.bff ^$(ProjectName)-^$(Configuration)'
	.ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -clean -config $BuildRootPath$/fbuild.bff ^$(ProjectName)-^$(Configuration)'
	.ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -config $BuildRootPath$/fbuild.bff clean-^$(ProjectName)-^$(Configuration)'
	.ProjectBasePath  = '$BuildRootPath$'
    //.ProjectInputPathsExclude = // (optional) Paths to exclude from project
    //.ProjectFilesToExclude          // (optional) List of files to exclude from project
    //.ProjectPatternToExclude        // (optional) Pattern(s) for files to exclude from project
    //.ProjectAllowedFileExtensions   // (optional) Extensions to allow in path searches
    //.ProjectPatternToExclude // (optional) Pattern(s) for files to exclude from project
    //.ProjectAllowedFileExtensions // (optional) Extensions to allow in path searches

	.OutputDirectory = '$BuildOutputPath$'
	.IntermediateDirectory = '$IntermediateFilePath$'
	.Platform = 'x64'
	.PlatformToolset = 'llvm'
	.Dependencies = {}
    
    .PreBuildDependencies = {}
	.DependencyObjectLists = {}
	.DependencyLibraries = {}
	.DependencyDLLs = {}
    .DependencyExecutables = {}
    .DependencyTasks = {}
    .UnityInputPath = {}
	.UnityInputPattern = '*.cpp'
    .UnityInputFiles = {}
    .UnityInputExcludedFiles = {}
    .UnityOutputPath = '$IntermediateFilePath$'
    .CompilerInputPath = {}
    .CompilerInputPattern = '*.cpp'
    .CompilerInputFiles = {}
    .CompilerInputExcludedFiles = {}
    .OutputFilePrefix = ''
	.OutputFileSuffix = ''
    
    .LocalDebuggerWorkingDirectory = ''

    .SolutionFolderName = ''
]

.SolutionCommon = 
[
    .ProjectType = 'sln'
]

.ObjectListCommon = 
[
	Using(.ProjectCommon)

    .ProjectType = 'obj'
    .CompilerInputUnity = {}
	.ConfigDependentCompilerOptions = {}
    .ConfigDependentInputPaths = {}
]

.LibraryCommon = 
[
	Using(.ObjectListCommon)

    .ProjectType = 'lib'
	.OutputFilePrefix = .LibPrefix
	.OutputFileSuffix = .LibSuffix
]

.DllCommon = 
[
	Using(.ProjectCommon)

    .ProjectType = 'dll'
	.Libraries = {}
	.OutputFilePrefix = .DllPrefix
	.OutputFileSuffix = .DllSuffix
]

.ExecutableCommon = 
[
	Using(.ProjectCommon)

    .ProjectType = 'exe'
	.Libraries = {}
	.OutputFilePrefix = ''
	.OutputFileSuffix = .ExeSuffix
]

.TestCommon = 
[
	Using(.ProjectCommon)

    .ProjectType = 'test'
    .TestWorkingDir = ''
    .TestOutputName = ''
]

.TaskCommon = 
[
	Using(.ProjectCommon)
    
    .ProjectType = 'task'
    .ExecExecutable = ''
    .ExecWorkingDir = ''
    .UseConfigDependentWorkingDir = true
	.ExecOutputName = ''
    .ExecOutputPath = ''
    .UseConfigDependentOutputPath = true
]

function PrintArray(.ArrayName .Array)
{
    ForEach(.Object in .Array)
	{
        Print('$ArrayName$:$Object$')
    }
}

function AddUnities(.UnityObject)
{
    Using(.UnityObject)

    ^ReturnValues = {}
        
    ForEach (.Unity in .CompilerInputUnity)
    {
        If(.Unity not in .Unities)
	    {
            Unity('$Unity$') {}
            ^Unities + .Unity
        }

        ^ReturnValues + '$Unity$'
    }
}

function AddObjectList(.ObjectList)
{
    .LocalObjectList = 
    [
        Using(.ObjectList)

        .ObjectListName = '$Name$-obj-$ConfigName$'

        ForEach(.Task in .DependencyTasks)
        {
            ^ReturnValues = {}
            AddTask(.Task)
            ^PreBuildDependencies + .ReturnValues
        }

        .CompilerOptions + ' -DPROFILING_ENABLED=$ProfilingEnabled$'
            + .ObjectListCompilerOptions

        .CompilerOptions + ' -DGRAPHICS_VALIDATION_ENABLED=$GraphicsValidationEnabled$'
            + .ObjectListCompilerOptions

        ForEach(.CompilerOption in .ConfigDependentCompilerOptions)
        {
            ^CompilerOptions + '$CompilerOption$/$ConfigName$'
            ^CompilerOptions + '$CompilerOption$/$ConfigName$/include'
        }

        .LocalConfigDependentInputPaths = {}
        ForEach(.ConfigDependentInputPath in .ConfigDependentInputPaths)
        {
            ^LocalConfigDependentInputPaths + '$ConfigDependentInputPath$/$ConfigName$'
        }
        .CompilerInputPath + .LocalConfigDependentInputPaths
        
        .CompilerOutputPath = '$IntermediateDirectory$/$ConfigName$/$Name$'
    ]

	Using(.LocalObjectList)

	If(.ObjectListName not in .BuildTargetNames)
	{
        ^ReturnValues = {}
        AddUnities(.LocalObjectList)

		ObjectList('$ObjectListName$') {}
        ^BuildTargetNames + .ObjectListName
	}

    ^ReturnValues = { '$ObjectListName$' }
}

function AddLibrary(.Library)
{
    .LocalLibrary = 
    [
        Using(.Library)

        .LibraryName = '$Name$-lib-$ConfigName$'

        ForEach(.Task in .DependencyTasks)
        {
            ^ReturnValues = {}
            AddTask(.Task)
            ^PreBuildDependencies + .ReturnValues
        }

        .CompilerOptions + ' -DPROFILING_ENABLED=$ProfilingEnabled$'
            + .LibraryCompilerOptions

        ForEach(.CompilerOption in .ConfigDependentCompilerOptions)
        {
            ^CompilerOptions + '$CompilerOption$/$ConfigName$'
            ^CompilerOptions + '$CompilerOption$/$ConfigName$/include'
        }

        .LocalConfigDependentInputPaths = {}
        ForEach(.ConfigDependentInputPath in .ConfigDependentInputPaths)
        {
            ^LocalConfigDependentInputPaths + '$ConfigDependentInputPath$/$ConfigName$'
        }
        .CompilerInputPath + .LocalConfigDependentInputPaths
        
        .CompilerOutputPath = '$IntermediateDirectory$/$ConfigName$/$Name$'

        .LibrarianOutput = '$OutputDirectory$/$ConfigName$/$OutputFilePrefix$$Name$$OutputFileSuffix$'
    ]

	Using(.LocalLibrary)

    If(.LibraryName not in .BuildTargetNames)
	{
        ^ReturnValues = {}
        AddUnities(.LocalLibrary)

        Library('$LibraryName$') {}
        ^BuildTargetNames + .LibraryName
	}

    ^ReturnValues = { '$LibraryName$' }
}

function AddDLL(.DLL)
{
    .LocalDLL = 
    [
        Using(.DLL)

        .DLLName = '$Name$-dll-$ConfigName$'

        .LinkerOptions + .DLLLinkerOptions
        .LinkerOutput = '$OutputDirectory$/$ConfigName$/$OutputFilePrefix$$Name$$OutputFileSuffix$'
    ]

	Using(.LocalDLL)

    If(.DLLName not in .BuildTargetNames)
	{
		ForEach(.ObjectList in .DependencyObjectLists)
		{
            ^ReturnValues = {}
            AddObjectList(.ObjectList)
            ^Libraries + .ReturnValues
        }

		ForEach(.Library in .DependencyLibraries)
		{
            ^ReturnValues = {}
            AddLibrary(.Library)
            ^Libraries + .ReturnValues
        }

		DLL('$DLLName$') {}
        ^BuildTargetNames + .DLLName
	}

    ^ReturnValues = { '$DLLName$' }
}

function AddExecutable(.Executable)
{
    .LocalExecutable = 
    [
        Using(.Executable)

        .ExecutableName = '$Name$-exe-$ConfigName$'

        .LinkerOptions + .ExecutableLinkerOptions
        .LinkerOutput = '$BuildOutputPath$/$ConfigName$/$Name$$OutputFileSuffix$'
    ]

	Using(.LocalExecutable)

    If(.ExecutableName not in .BuildTargetNames)
	{
		ForEach(.ObjectList in .DependencyObjectLists)
		{
            ^ReturnValues = {}
            AddObjectList(.ObjectList)
            ^Libraries + .ReturnValues
		}

		ForEach(.Library in .DependencyLibraries)
		{
            ^ReturnValues = {}
            AddLibrary(.Library)
            ^Libraries + .ReturnValues
		}

		ForEach(.DLL in .DependencyDLLs)
		{
            ^ReturnValues = {}
            AddDLL(.DLL)
            ^Libraries + .ReturnValues
		}

		Executable('$ExecutableName$') {}
        ^BuildTargetNames + .ExecutableName
	}

    ^ReturnValues = { '$ExecutableName$' }
}

function AddTest(.Test)
{
    .LocalTest = 
    [
        Using(.Test)
        
        .TestName = '$Name$-test-$ConfigName$'
                
        If (.TestWorkingDir == .EmptyString)
        {
            ^TestWorkingDir = '$IntermediateDirectory$/$ConfigName$/$Name$'
        }

        .TestExecutable = '$Name$-exe-$ConfigName$'
        .TestOutput = '$IntermediateDirectory$/$ConfigName$/$Name$/$TestOutputName$'
    ]

	Using(.LocalTest)

    If(.TestName not in .BuildTargetNames)
	{
        ForEach(.Executable in .DependencyExecutables)
        {
            ^ReturnValues = {}
            AddExecutable(.Executable)
        }
        
		Test('$TestName$') {}
        ^BuildTargetNames + .TestName
	}

    ^ReturnValues = { '$TestName$' }
}

function AddTask(.Task)
{
    .LocalTask = 
    [
        Using(.Task)
        
        .TaskName = '$Name$-task-$ConfigName$'

        If (.ExecExecutable == .EmptyString)
        {
            ^ExecExecutable = '$Name$-exe-$ConfigName$'
        }

        If (.ExecWorkingDir == .EmptyString)
        {
            ^ExecWorkingDir = '$IntermediateDirectory$'
        }

        If (.UseConfigDependentWorkingDir)
        {
            ^ExecWorkingDir + '/$ConfigName$/$Name$'
        }

        If (.ExecOutputName == .EmptyString)
        {
            ^ExecOutputName = '$Name$'
        }

        If (.ExecOutputPath == .EmptyString)
        {
            ^ExecOutputPath = '$IntermediateDirectory$'
        }

        If (.UseConfigDependentOutputPath)
        {
            ^ExecOutputPath + '/$ConfigName$/$Name$'
        }

        .ExecOutput = '$ExecOutputPath$/$ExecOutputName$'
    ]

	Using(.LocalTask)

    If(.TaskName not in .BuildTargetNames)
	{
        ForEach(.Executable in .DependencyExecutables)
        {
            ^ReturnValues = {}
            AddExecutable(.Executable)
        }

		Exec('$TaskName$') {}
        ^BuildTargetNames + .TaskName
	}

    ^ReturnValues = { '$TaskName$' }
}

function AddBuildTarget(.BuildTarget)
{
    Using(.BuildTarget)

    .TestString = 'obj'
    If(.ProjectType == .TestString)
    {
        AddObjectList(.BuildTarget)
    }

    .TestString = 'lib'
    If(.ProjectType == .TestString)
    {
        AddLibrary(.BuildTarget)
    }

    .TestString = 'dll'
    If(.ProjectType == .TestString)
    {
        AddDLL(.BuildTarget)
    }

    .TestString = 'exe'
    If(.ProjectType == .TestString)
    {
        AddExecutable(.BuildTarget)
    }

    .TestString = 'test'
    If(.ProjectType == .TestString)
    {
        AddTest(.BuildTarget)
    }

    .TestString = 'task'
    If(.ProjectType == .TestString)
    {
        AddTask(.BuildTarget)
    }

    ^ReturnValues = { '$ProjectType$' }
}

function AddProjectConfig(.ProjectConfig)
{
    Using(.ProjectConfig)

    If(.ProjectConfigName not in .ProjectConfigNames)
	{
		^ProjectConfigs + .ProjectConfig
        ^ProjectConfigNames + .ProjectConfigName
	}

    ^ReturnValues = { '$ProjectConfigName$' }
}

function AddToSolutionFolder(.Project)
{
    Using(.Project)

    .LocalSolutionFolders = {}
    .LocalSolutionFolderNames = {}
    
    If(.SolutionFolderName not in .SolutionFolderNames)
    {
        .LocalSolutionFolder =
        [
            .Path = .SolutionFolderName
            .Projects = { .ProjectName }
            .Items = {}
        ]

        Using(.LocalSolutionFolder)

        // Print('AddSolutionFolder:$SolutionFolderName$')
        // PrintArray('AddToSolutionFolder:SolutionFolder:Projects', .Projects)

        ^LocalSolutionFolders + .LocalSolutionFolder
        ^LocalSolutionFolderNames + .SolutionFolderName
    }

    ForEach(.SolutionFolder in .SolutionFolders)
    {
        Using(.SolutionFolder)

        .LocalProjects = .Projects

        If(.SolutionFolderName == .Path)
        {
            ^LocalProjects + .ProjectName
        }

        .LocalSolutionFolder = 
        [
            .Path = .Path
            .Projects = .LocalProjects
            .Items = .Items
        ]

        // PrintArray('AddToSolutionFolder:SolutionFolder:Projects', .LocalProjects)

        ^LocalSolutionFolders + .LocalSolutionFolder
        ^LocalSolutionFolderNames + .Path
    }

   ^SolutionFolders = .LocalSolutionFolders
   ^SolutionFolderNames = .LocalSolutionFolderNames

    ^ReturnValues = { '$SolutionFolderName$' }
}

function AddProject(.Project)
{
    .LocalProject = 
    [
        Using(.Project)

        .ProjectName = '$Name$-$ProjectType$'
        .ProjectInputPaths = .UnityInputPath + .CompilerInputPath
        .ProjectFiles = .UnityInputFiles + .CompilerInputFiles
        .ProjectOutput = '$VisualStudioSolutionPath$/$ProjectName$.vcxproj'
        .Output = '$BuildOutputPath$/^$(Configuration)/$OutputFilePrefix$$Name$$OutputFilePrefix$'
    ]

    Using(.LocalProject)

    If(.ProjectName not in .ProjectNames)
	{
        ForEach(.ObjectList in .DependencyObjectLists)
		{
            ^ReturnValues = {}
            AddProject(.ObjectList)
            //^Dependencies + .ReturnValues
		}

		ForEach(.Library in .DependencyLibraries)
		{
            ^ReturnValues = {}
            AddProject(.Library)
            //^Dependencies + .ReturnValues
		}

		ForEach(.DLL in .DependencyDLLs)
		{
            ^ReturnValues = {}
            AddProject(.DLL)
            //^Dependencies + .ReturnValues
		}

		//Print('AddProject:$ProjectName$')

        VCXProject('$ProjectName$') {}

        If (.SolutionFolderName != .EmptyString)
        {
            AddToSolutionFolder(.Project)
        }

        ^ProjectNames + .ProjectName
	}

    ^ReturnValues = { '$ProjectName$' }
}

function AddSolution(.Solution)
{
    .LocalSolution = 
    [
        Using(.Solution)

        .SolutionName = '$Name$-$ProjectType$'
        .SolutionOutput = '$VisualStudioSolutionPath$/$Name$.sln'
        //.SolutionFolders
        //.SolutionDependencies
        //.SolutionVisualStudioVersion        // (optional) Version of Solution (default "14.0.22823.1" VS2015 RC)
        //.SolutionMinimumVisualStudioVersion // (optional) Min version of Solution (default "10.0.40219.1" VS2010 Express)
        //.SolutionBuildProject               // (optional) Project(s) set to build when "Build Solution" is selected
        //.SolutionDeployProjects             // (optional) Project(s) set deploy
    ]

    Using(.LocalSolution)

    If(.SolutionName not in .SolutionNames)
	{
        VSSolution('$SolutionName$') {}
        ^SolutionNames + .SolutionName
	}

    ^ReturnValues = { '$SolutionName$' }
}
